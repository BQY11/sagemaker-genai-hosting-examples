AWSTemplateFormatVersion: 2010-09-09
Description: Template to provision OpenSearch cluster and SageMaker Notebook for semantic search

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Required Parameters
        Parameters:         
          - OpenSearchPasswordArn
          - VpcId
          - SubnetIds
          - SecurityGroupIds
    ParameterLabels:      
      AppName:
        default: Name of the overall application
      OpenSearchUsername:
        default: OpenSearch cluster username
      OpenSearchPasswordArn:
        default: ARN of OpenSearch password in Secrets Manager
      OpenSearchIndexName:
        default: OpenSearch index name
      SageMakerNotebookName:
        default: Name of SageMaker Notebook Instance
      VpcId:
        default: VPC ID
      SubnetIds:
        default: Subnet IDs
      SecurityGroupIds:
        default: Security Group IDs
      
Parameters:
  InstanceType:
    Type: String
    Description: Choosing c5.large
    Default: c5.large   
  OpenSearchUsername:
    AllowedPattern: '^[a-zA-Z0-9]+$'
    Default: admin
    Description: User name for the account that will be added to the OpenSearch cluster.
    MaxLength: '25'
    MinLength: '5'
    Type: String
  OpenSearchPasswordArn:
    Type: String
    Description: ARN of the secret containing the OpenSearch password in Secrets Manager
  OpenSearchIndexName:
    Default: sagemaker-rag-opensearch-embeddings
    Type: String    
    Description: Name of the OpenSearch index for storing embeddings.
  AppName:
    Default: sagemaker-rag-opensearch
    Type: String
    AllowedValues: [sagemaker-rag-opensearch]
    Description: Name of the overall application, this is used while creating the ML model endpoint.
  SageMakerNotebookName:
    Default: sagemaker-rag-opensearch-notebook
    Type: String
    AllowedValues: [sagemaker-rag-opensearch-notebook]
    Description: Name of the SageMaker Notebook Instance.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for OpenSearch domain
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs for OpenSearch domain
  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: List of security group IDs for OpenSearch domain

Mappings: 
  RegionMap: 
    us-east-1:
      HVM64: ami-041feb57c611358bd
    us-west-2:
      HVM64: ami-07d07d65c47e5aa90
    eu-west-1:
      HVM64: ami-0b9fd8b55a6e3c9d5
 
Resources:
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting resources
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow SageMaker to use the key
            Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: 
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow Secrets Manager to use the key
            Effect: Allow
            Principal:
              Service: secretsmanager.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: '*'

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}-key'
      TargetKeyId: !Ref KMSKey

  OpenSearchSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub OpenSearchSecret-${AWS::StackName}
      Description: OpenSearch username and password
      KmsKeyId: !Ref KMSKey
      SecretString: !Sub '{ "username" : "${OpenSearchUsername}", "password" : "{{resolve:secretsmanager:${OpenSearchPasswordArn}:SecretString}}" }'

  OpenSearchServiceDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*/*
      EngineVersion: 'OpenSearch_2.13'
      ClusterConfig:
        InstanceType: "r6g.2xlarge.search"
      EBSOptions:
        EBSEnabled: True
        VolumeSize: 20
        VolumeType: 'gp3'
      AdvancedSecurityOptions:
        AnonymousAuthEnabled: False
        Enabled: True
        InternalUserDatabaseEnabled: True
        MasterUserOptions:
          MasterUserName: !Sub ${OpenSearchUsername}
          MasterUserPassword: !Sub '{{resolve:secretsmanager:${OpenSearchPasswordArn}:SecretString}}'
      NodeToNodeEncryptionOptions:
        Enabled: True
      EncryptionAtRestOptions:
        Enabled: True
        KmsKeyId: alias/aws/es
      DomainEndpointOptions:
        EnforceHTTPS: True
      LogPublishingOptions:
        SEARCH_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true
        INDEX_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true
        ES_APPLICATION_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true
        AUDIT_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true
      VPCOptions:
        SubnetIds: !Ref SubnetIds
        SecurityGroupIds: !Ref SecurityGroupIds

  OpenSearchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/opensearch/${AWS::StackName}'
      RetentionInDays: 30

  OpenSearchLogResourcePolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: OpenSearchLogResourcePolicy
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "es.amazonaws.com"
              },
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:PutLogEventsBatch"
              ],
              "Resource": "${OpenSearchLogGroup.Arn}:*"
            }
          ]
        }
  
  CodeRepository:
    Type: AWS::SageMaker::CodeRepository
    Properties:
      GitConfig:
        RepositoryUrl:  https://github.com/aws-samples/sagemaker-genai-hosting-examples.git
  
  NBRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: SecretsManagerReadWrite
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecret
                Resource: 
                  - !Ref OpenSearchSecret
                  - !Ref OpenSearchPasswordArn
        - PolicyName: CloudFormationReadThisTemplateOutputs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
        - PolicyName: KMSKeyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey*
                Resource: !GetAtt KMSKey.Arn
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole        

  NotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: !Ref SageMakerNotebookName
      InstanceType: ml.t3.medium
      RoleArn: !GetAtt NBRole.Arn
      VolumeSizeInGB : 50
      DefaultCodeRepository: !GetAtt CodeRepository.CodeRepositoryName
      KmsKeyId: !GetAtt KMSKey.Arn
      InstanceMetadataServiceConfiguration:
        MinimumInstanceMetadataServiceVersion: 2
        
Outputs:
  OpenSearchDomainEndpoint:
    Description: OpenSearch domain endpoint
    Value:
      'Fn::GetAtt':
        - OpenSearchServiceDomain
        - DomainEndpoint

  OpenSourceDomainArn:
    Description: OpenSearch domain ARN
    Value:
      'Fn::GetAtt':
        - OpenSearchServiceDomain
        - Arn

  OpenSearchDomainName:
    Description: OpenSearch domain name
    Value: !Ref OpenSearchServiceDomain

  Region:
    Description: Deployed Region
    Value: !Ref AWS::Region

  OpenSearchSecret:
    Description: Name of the OpenSearch secret in Secrets Manager
    Value: !Ref OpenSearchSecret

  SageMakerNotebookURL:
    Description: SageMaker Notebook Instance
    Value: !Join
      - ''
      - - 'https://console.aws.amazon.com/sagemaker/home?region='
        - !Ref AWS::Region
        - '#/notebook-instances/openNotebook/'
        - !GetAtt NotebookInstance.NotebookInstanceName
        - '?view=lab'
        
  NotebookRole:
    Description: Sagemaker notebook instance role
    Value: !Ref NBRole
    Description: Sagem

  NotebookRoleArn:
    Description: Sagemaker Notebook instance role ARN
    Value: !GetAtt NBRole.Arn

