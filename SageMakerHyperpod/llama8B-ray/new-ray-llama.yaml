##Working one for ray and llama 
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: llama-3-8b
spec:
  serveConfigV2: |
    applications:
    - name: llm
      route_prefix: /
      import_path:  ray-operator.config.samples.vllm.serve:model
      deployments:
      - name: VLLMDeployment
        num_replicas: 1
        ray_actor_options:
          num_cpus: 8
          # NOTE: num_gpus is set automatically based on TENSOR_PARALLELISM
      runtime_env:
        working_dir: "https://github.com/ray-project/kuberay/archive/master.zip"
        pip: ["vllm==0.5.4"]
        env_vars:
          MODEL_ID: "meta-llama/Meta-Llama-3-8B-Instruct"
          TENSOR_PARALLELISM: "2"
          PIPELINE_PARALLELISM: "1"
  rayClusterConfig:
    headGroupSpec:
      rayStartParams:
        dashboard-host: '0.0.0.0'
      template:
        spec:
          containers:
          - name: ray-head
            image: rayproject/ray-ml:2.33.0.914af0-py311
            resources:
              limits:
                cpu: "2"
                memory: "8Gi"
                nvidia.com/gpu: "1"
              requests:
                cpu: "2"
                memory: "8Gi"
                nvidia.com/gpu: "1"
            ports:
            - containerPort: 6379
              name: gcs-server
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            env:
            - name: HUGGING_FACE_HUB_TOKEN
              value: "" ##Remember to subscribe to the mdoel and add your huggingface token here
    workerGroupSpecs:
    - replicas: 1
      minReplicas: 1
      maxReplicas: 4
      groupName: gpu-group
      rayStartParams: {}
      template:
        spec:
          containers:
          - name: llm
            image: rayproject/ray-ml:2.33.0.914af0-py311
            env:
            - name: HUGGING_FACE_HUB_TOKEN
              value: "" #Remember to subscribe to the mdoel and add your huggingface token here
            resources:
              limits:
                cpu: "8"
                memory: "20Gi"
                nvidia.com/gpu: "1"
              requests:
                cpu: "8"
                memory: "20Gi"
                nvidia.com/gpu: "1"
          # Please add the following taints to the GPU node.
          tolerations:
            - key: "nvidia.com/gpu"
              operator: "Exists"
              effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: llama-3-8b-lb
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "external"
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8000  # Ray Serve port
      name: serve
    - port: 8265
      protocol: TCP
      targetPort: 8265  # Ray Dashboard port
      name: dashboard
  selector:
    ray.io/node-type: head
    ray.io/serve: "true"
    app.kubernetes.io/created-by: kuberay-operator
  type: LoadBalancer
